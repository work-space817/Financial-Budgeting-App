{"version":3,"sources":["components/containers/CropperComponent/CropperComponent.tsx","components/containers/CropperComponent/CropperComponent.module.css","components/adminPanel/Users/UserEdit/validation.ts","components/adminPanel/Users/UserEdit/index.tsx"],"names":["CropperComponent","onChange","field","error","touched","value","aspectRatio","useState","img","setImg","cropperObj","setCropperObj","imgRef","useRef","prevRef","base64","setBase64","showModal","setShowModal","handleImageChange","e","file","target","files","url","URL","createObjectURL","replace","useEffect","current","cropper","Cropper","viewMode","preview","className","classes","formGroup","htmlFor","style","height","width","classNames","labelInput","bgImg","src","alt","id","type","onClose","modalBody","image","ref","border","overflow","onClick","rotate","icon","faSync","size","base","getCroppedCanvas","toDataURL","faCheckCircle","faTimesCircle","module","exports","EditUserSchema","yup","required","email","firstName","secondName","photo","nullable","phone","matches","EditUser","useTypedSelector","store","userCrud","userData","loading","useActions","updateUser","getUserById","navigator","useNavigate","useParams","_id","Number","title","onHandleSubmit","values","formik","useFormik","initialValues","validationSchema","onSubmit","enableReinitialize","errors","handleChange","handleSubmit","setFieldValue","Helmet","InputGroup","label"],"mappings":"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","file":"static/js/12.e355a59c.chunk.js","sourcesContent":["import Cropper from \"cropperjs\";\r\nimport { LegacyRef, useEffect, useRef, useState } from \"react\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport classes from \"./CropperComponent.module.css\";\r\n\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport classNames from \"classnames\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faSync,\r\n  faCheckCircle,\r\n  faTimesCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport interface IGetCropperProps {\r\n  onChange: (field: string, value: string) => void;\r\n  field: string;\r\n  value?: string;\r\n  error?: string;\r\n  touched?: boolean;\r\n  aspectRatio?: number;\r\n}\r\n\r\nconst CropperComponent: React.FC<IGetCropperProps> = ({\r\n  onChange,\r\n  field,\r\n  error,\r\n  touched,\r\n  value,\r\n  aspectRatio = 16 / 9,\r\n}) => {\r\n  const [img, setImg] = useState<string>(value as string);\r\n  const [cropperObj, setCropperObj] = useState<Cropper>();\r\n  const imgRef = useRef<HTMLImageElement>(null);\r\n  const prevRef = useRef<HTMLDivElement>();\r\n  const [base64, setBase64] = useState<any>();\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const handleImageChange = async (e: any) => {\r\n    const file = (e.target.files as FileList)[0];\r\n    if (file) {\r\n      const url = URL.createObjectURL(file);\r\n      await setImg(url);\r\n      cropperObj?.replace(url);\r\n      setShowModal(true);\r\n    }\r\n    e.target.value = \"\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (imgRef.current) {\r\n      const cropper = new Cropper(imgRef.current as HTMLImageElement, {\r\n        aspectRatio: aspectRatio,\r\n        viewMode: 1,\r\n        preview: prevRef.current,\r\n      });\r\n      cropper.replace(img);\r\n      setCropperObj(cropper);\r\n    }\r\n  }, [showModal, img, aspectRatio]);\r\n\r\n  const rotateImg = () => {\r\n    if (imgRef.current) {\r\n      cropperObj?.rotate(90);\r\n    }\r\n  };\r\n\r\n  const getBase64 = () => {\r\n    const base = cropperObj?.getCroppedCanvas().toDataURL() as string;\r\n    setBase64(base);\r\n    setShowModal(false);\r\n    onChange(field as string, base);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={classes.formGroup}>\r\n        <label htmlFor={field} style={{ height: \"100%\", width: \"100%\" }}>\r\n          <div\r\n            className={classNames(\r\n              classes.labelInput,\r\n              { \"text-danger border border-danger rounded\": touched && error },\r\n              { \"is-valid border border-success rounded\": touched && !error }\r\n            )}\r\n          >\r\n            {base64 && (\r\n              <img className={classes.bgImg} src={base64} alt=\"asdas\" />\r\n            )}\r\n            {!base64 && (\r\n              <>\r\n                {value && (\r\n                  <img style={{ width: \"100%\" }} src={value} alt=\"asdasda\" />\r\n                )}\r\n                {!value && (\r\n                  <>\r\n                    <i className=\"fa fa-image fa-5x\"></i>\r\n                    <span className=\"d-block\">Для вибору фото натисніть</span>\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n            {error && <div>{error}</div>}\r\n          </div>\r\n        </label>\r\n\r\n        <input\r\n          id={field}\r\n          className=\"d-none\"\r\n          type=\"file\"\r\n          onChange={handleImageChange}\r\n        />\r\n      </form>\r\n\r\n      {showModal && (\r\n        <Modal\r\n          onClose={() => {\r\n            setShowModal(false);\r\n          }}\r\n        >\r\n          <div className={classes.modalBody}>\r\n            <div className={classes.image}>\r\n              {\r\n                <img\r\n                  ref={imgRef as LegacyRef<HTMLImageElement>}\r\n                  src={value}\r\n                  alt=\"asdds\"\r\n                />\r\n              }\r\n            </div>\r\n            <div\r\n              ref={prevRef as LegacyRef<HTMLDivElement>}\r\n              style={{\r\n                height: \"150px\",\r\n                width: \"150px\",\r\n                border: \"1px solid silver\",\r\n                overflow: \"hidden\",\r\n              }}\r\n            ></div>\r\n            <div className=\"d-flex justify-content-around mt-2\">\r\n              <button\r\n                onClick={rotateImg}\r\n                type=\"button\"\r\n                className=\"btn btn-outline-secondary\"\r\n              >\r\n                <FontAwesomeIcon icon={faSync} size={\"2x\"} />\r\n              </button>\r\n              <div\r\n                className=\"d-flex justify-content-between\"\r\n                style={{ width: \"150px\" }}\r\n              >\r\n                <button\r\n                  onClick={getBase64}\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-success\"\r\n                >\r\n                  <FontAwesomeIcon icon={faCheckCircle} size={\"2x\"} />\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    setShowModal(false);\r\n                  }}\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-danger\"\r\n                >\r\n                  <FontAwesomeIcon icon={faTimesCircle} size={\"2x\"} />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CropperComponent;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBody\":\"CropperComponent_modalBody__2D_CS\",\"image\":\"CropperComponent_image__2KbH0\",\"formGroup\":\"CropperComponent_formGroup__31n-Q\",\"labelInput\":\"CropperComponent_labelInput__3e2Hl\",\"bgImg\":\"CropperComponent_bgImg__7A-8d\"};","import * as yup from \"yup\";\r\n\r\nexport const EditUserSchema = yup.object({\r\n  id: yup.number().required(),\r\n  email: yup\r\n    .string()\r\n    .email(\"Введіть коректний Email\")\r\n    .required(\"Поле не повинне бути пустим\"),\r\n  firstName: yup.string().required(\"Поле не повинне бути пустим\"),\r\n  secondName: yup.string().required(\"Поле не повинне бути пустим\"),\r\n  photo: yup.array().nullable(),\r\n  phone: yup\r\n    .string()\r\n    .matches(\r\n      /^((\\+?3)?8)?((0\\(\\d{2}\\)?)|(\\(0\\d{2}\\))|(0\\d{2}))\\d{7}$/,\r\n      \"Невірний формат\"\r\n    )\r\n    .required(\"Поле не повинне бути пустим\"),\r\n});\r\n","import { Form, FormikProvider, useFormik } from 'formik';\r\nimport { useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { useTypedSelector } from '../../../../hooks/useTypedSelector';\r\nimport { EditUserSchema } from './validation';\r\nimport { Card } from \"primereact/card\" \r\nimport { Helmet } from 'react-helmet';\r\nimport EclipseWidget from '../../../common/eclipse';\r\nimport InputGroup from '../../../common/InputGroup';\r\nimport { Button } from 'primereact/button';\r\nimport CropperComponent from '../../../containers/CropperComponent/CropperComponent';\r\nimport \"./userEdit.css\"\r\n\r\nconst EditUser = () => {\r\n  const { userData, loading } = useTypedSelector((store) => store.userCrud);\r\n  const { updateUser , getUserById} = useActions();\r\n  const navigator = useNavigate();\r\n  const { id } = useParams();\r\n  const _id = Number(id);\r\n\r\n  useEffect(() => {\r\n    getUserById(_id);\r\n  }, [getUserById, _id]);\r\n\r\n  const title = <h3 className=\"text-center\">Редагування</h3>;\r\n\r\n\r\n\tconst onHandleSubmit = async () => {\r\n    try {\r\n      await updateUser(values);\r\n      navigator(\"/adminPanel/users\");\r\n    } catch (error) {\r\n      \r\n    }\r\n  };\r\n\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        ...userData,\r\n        photo: `https://vovalohika.tk/images/600_${userData.photo}`,\r\n      },\r\n      validationSchema: EditUserSchema,\r\n      onSubmit: onHandleSubmit,\r\n      enableReinitialize: true,\r\n    });\r\n\r\n  const {\r\n    errors,\r\n    touched,\r\n    handleChange,\r\n    handleSubmit,\r\n    setFieldValue,\r\n    values,\r\n  } = formik;\r\n\treturn (\r\n    <>\r\n      <Helmet>\r\n        <title>Редагувати користувача</title>\r\n      </Helmet>\r\n      {loading && <EclipseWidget />}\r\n      {!loading && (\r\n        <Card title={title} className=\"p-5\">\r\n          <FormikProvider value={formik}>\r\n            <Form onSubmit={handleSubmit}>\r\n              <div className=\"row\">\r\n                <div className=\"col-1\"></div>\r\n                <div className=\"col-3 m-3\">\r\n                  <div className=\"CroperSize_editUser\">\r\n                    <CropperComponent\r\n                      aspectRatio={4 / 4}\r\n                      field=\"photo\"\r\n                      onChange={setFieldValue}\r\n                      error={errors.photo}\r\n                      touched={touched.photo}\r\n                      value={values.photo}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-4\">\r\n                  <InputGroup\r\n                    field=\"firstName\"\r\n                    label=\"Ім'я\"\r\n                    error={errors.firstName}\r\n                    touched={touched.firstName}\r\n                    value={values.firstName}\r\n                    onChange={handleChange}\r\n                  />\r\n\r\n                  <InputGroup\r\n                    field=\"secondName\"\r\n                    label=\"Прізвище\"\r\n                    error={errors.secondName}\r\n                    onChange={handleChange}\r\n                    touched={touched.secondName}\r\n                    value={values.secondName}\r\n                  />\r\n\r\n                  <InputGroup\r\n                    field=\"email\"\r\n                    label=\"Email\"\r\n                    error={errors.email}\r\n                    onChange={handleChange}\r\n                    touched={touched.email}\r\n                    value={values.email}\r\n                  />\r\n\r\n                  <InputGroup\r\n                    field=\"phone\"\r\n                    label=\"Телефон\"\r\n                    error={errors.phone}\r\n                    onChange={handleChange}\r\n                    touched={touched.phone}\r\n                    value={values.phone}\r\n                  />\r\n\r\n                  <div className=\"text-center\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      label=\"Редагувати\"\r\n                      icon=\"pi pi-check\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-2\"></div>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          </FormikProvider>\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditUser;"],"sourceRoot":""}