{"version":3,"sources":["components/containers/CropperComponent/CropperComponent.tsx","components/containers/CropperComponent/CropperComponent.module.css","components/adminPanel/News/validation.ts","components/common/Callendar/index.tsx","components/adminPanel/News/NewsForm/index.tsx","components/adminPanel/News/AddNews/index.tsx"],"names":["CropperComponent","onChange","field","error","touched","value","aspectRatio","useState","img","setImg","cropperObj","setCropperObj","imgRef","useRef","prevRef","base64","setBase64","showModal","setShowModal","handleImageChange","e","file","target","files","url","URL","createObjectURL","replace","useEffect","current","cropper","Cropper","viewMode","preview","className","classes","formGroup","htmlFor","style","height","width","classNames","labelInput","bgImg","src","alt","id","type","onClose","modalBody","image","ref","border","overflow","onClick","rotate","icon","faSync","size","base","getCroppedCanvas","toDataURL","faCheckCircle","faTimesCircle","module","exports","EditorSchema","yup","name","required","text","slug","dateTimePublish","Callendar","label","props","autoComplete","locale","uk","dateFormat","FormNews","navigate","useNavigate","uploadImages","useActions","images","useTypedSelector","store","news","toast","loading","cyr","CyrillicToTranslit","initVal","addUpdateHandler","buttonText","header","toaastDetail","initialValues","uploadImng","show","severity","summary","detail","life","onHandleSubmit","values","formik","useFormik","validationSchema","onSubmit","enableReinitialize","errors","handleChange","handleSubmit","setFieldValue","padding","InputGroup","onBlur","transform","checked","isShow","data","toLocaleDateString","console","log","EditorTiny","onEditorChange","a","CropperMultiple","uploadImageHandler","map","el","i","AddNews","addNews"],"mappings":"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","file":"static/js/13.bc2f8ab9.chunk.js","sourcesContent":["import Cropper from \"cropperjs\";\r\nimport { LegacyRef, useEffect, useRef, useState } from \"react\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport classes from \"./CropperComponent.module.css\";\r\n\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport classNames from \"classnames\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faSync,\r\n  faCheckCircle,\r\n  faTimesCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport interface IGetCropperProps {\r\n  onChange: (field: string, value: string) => void;\r\n  field: string;\r\n  value?: string;\r\n  error?: string;\r\n  touched?: boolean;\r\n  aspectRatio?: number;\r\n}\r\n\r\nconst CropperComponent: React.FC<IGetCropperProps> = ({\r\n  onChange,\r\n  field,\r\n  error,\r\n  touched,\r\n  value,\r\n  aspectRatio = 16 / 9,\r\n}) => {\r\n  const [img, setImg] = useState<string>(value as string);\r\n  const [cropperObj, setCropperObj] = useState<Cropper>();\r\n  const imgRef = useRef<HTMLImageElement>(null);\r\n  const prevRef = useRef<HTMLDivElement>();\r\n  const [base64, setBase64] = useState<any>();\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const handleImageChange = async (e: any) => {\r\n    const file = (e.target.files as FileList)[0];\r\n    if (file) {\r\n      const url = URL.createObjectURL(file);\r\n      await setImg(url);\r\n      cropperObj?.replace(url);\r\n      setShowModal(true);\r\n    }\r\n    e.target.value = \"\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (imgRef.current) {\r\n      const cropper = new Cropper(imgRef.current as HTMLImageElement, {\r\n        aspectRatio: aspectRatio,\r\n        viewMode: 1,\r\n        preview: prevRef.current,\r\n      });\r\n      cropper.replace(img);\r\n      setCropperObj(cropper);\r\n    }\r\n  }, [showModal, img, aspectRatio]);\r\n\r\n  const rotateImg = () => {\r\n    if (imgRef.current) {\r\n      cropperObj?.rotate(90);\r\n    }\r\n  };\r\n\r\n  const getBase64 = () => {\r\n    const base = cropperObj?.getCroppedCanvas().toDataURL() as string;\r\n    setBase64(base);\r\n    setShowModal(false);\r\n    onChange(field as string, base);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={classes.formGroup}>\r\n        <label htmlFor={field} style={{ height: \"100%\", width: \"100%\" }}>\r\n          <div\r\n            className={classNames(\r\n              classes.labelInput,\r\n              { \"text-danger border border-danger rounded\": touched && error },\r\n              { \"is-valid border border-success rounded\": touched && !error }\r\n            )}\r\n          >\r\n            {base64 && (\r\n              <img className={classes.bgImg} src={base64} alt=\"asdas\" />\r\n            )}\r\n            {!base64 && (\r\n              <>\r\n                {value && (\r\n                  <img style={{ width: \"100%\" }} src={value} alt=\"asdasda\" />\r\n                )}\r\n                {!value && (\r\n                  <>\r\n                    <i className=\"fa fa-image fa-5x\"></i>\r\n                    <span className=\"d-block\">Для вибору фото натисніть</span>\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n            {error && <div>{error}</div>}\r\n          </div>\r\n        </label>\r\n\r\n        <input\r\n          id={field}\r\n          className=\"d-none\"\r\n          type=\"file\"\r\n          onChange={handleImageChange}\r\n        />\r\n      </form>\r\n\r\n      {showModal && (\r\n        <Modal\r\n          onClose={() => {\r\n            setShowModal(false);\r\n          }}\r\n        >\r\n          <div className={classes.modalBody}>\r\n            <div className={classes.image}>\r\n              {\r\n                <img\r\n                  ref={imgRef as LegacyRef<HTMLImageElement>}\r\n                  src={value}\r\n                  alt=\"asdds\"\r\n                />\r\n              }\r\n            </div>\r\n            <div\r\n              ref={prevRef as LegacyRef<HTMLDivElement>}\r\n              style={{\r\n                height: \"150px\",\r\n                width: \"150px\",\r\n                border: \"1px solid silver\",\r\n                overflow: \"hidden\",\r\n              }}\r\n            ></div>\r\n            <div className=\"d-flex justify-content-around mt-2\">\r\n              <button\r\n                onClick={rotateImg}\r\n                type=\"button\"\r\n                className=\"btn btn-outline-secondary\"\r\n              >\r\n                <FontAwesomeIcon icon={faSync} size={\"2x\"} />\r\n              </button>\r\n              <div\r\n                className=\"d-flex justify-content-between\"\r\n                style={{ width: \"150px\" }}\r\n              >\r\n                <button\r\n                  onClick={getBase64}\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-success\"\r\n                >\r\n                  <FontAwesomeIcon icon={faCheckCircle} size={\"2x\"} />\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    setShowModal(false);\r\n                  }}\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-danger\"\r\n                >\r\n                  <FontAwesomeIcon icon={faTimesCircle} size={\"2x\"} />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CropperComponent;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBody\":\"CropperComponent_modalBody__2D_CS\",\"image\":\"CropperComponent_image__2KbH0\",\"formGroup\":\"CropperComponent_formGroup__31n-Q\",\"labelInput\":\"CropperComponent_labelInput__3e2Hl\",\"bgImg\":\"CropperComponent_bgImg__7A-8d\"};","import * as yup from \"yup\";\r\n\r\nexport const EditorSchema = yup.object({\r\n  name: yup.string().required(\"Поле не повинне бути пустим\"),\r\n  text: yup.string().required(\"Поле не повинне бути пустим\"),\r\n  //image: yup.string().required(\"Поле не повинне бути пустим\"),\r\n  slug: yup.string().required(\"Поле не повинне бути пустим\"),\r\n  //isSHow: yup.boolean().required(),\r\n  dateTimePublish: yup.string().required(\"Поле не повинне бути пустим\"),\r\n});\r\n","import { FC } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\nimport uk from \"date-fns/locale/uk\"\r\n\r\ninterface DatePickerProps extends ReactDatePickerProps {\r\n  label: string;\r\n  field: string;\r\n  touched?: boolean | null;\r\n  error?: string | null;\r\n  onChange(date: Date, event: React.SyntheticEvent<any> | undefined): void;\r\n}\r\n\r\nconst Callendar: FC<DatePickerProps> = ({\r\n  label,\r\n  field,\r\n  touched = null,\r\n  error = null,\r\n  onChange,\r\n  ...props\r\n}: DatePickerProps) => {\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <label htmlFor={field} className=\"form-label\">\r\n        {label}\r\n      </label>\r\n      <DatePicker\r\n        name={field}\r\n        autoComplete=\"off\"\r\n        locale={uk}\r\n        dateFormat=\"dd/MM/yyyy\"\r\n        className={classNames(\r\n          \"form-control\",\r\n          { \"is-invalid\": touched && error },\r\n          { \"is-valid\": touched && !error }\r\n        )}\r\n        onChange={onChange}\r\n        {...props}\r\n      />\r\n      {touched && error && <div className=\"invalid-feedback\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Callendar;\r\n","import { Card } from \"primereact/card\";\r\nimport { IEditorValues, PhotoObj } from \"../types\";\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\nimport { EditorSchema } from \"../validation\";\r\nimport InputGroup from \"../../../common/InputGroup\";\r\nimport { Button } from \"primereact/button\";\r\nimport CyrillicToTranslit from \"cyrillic-to-translit-js\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport EditorTiny from \"../../../common/EditorTiny/EditorTiny\";\r\nimport Callendar from \"../../../common/Callendar\";\r\nimport EclipseWidget from \"../../../common/eclipse\";\r\nimport { InputSwitch } from \"primereact/inputswitch\";\r\nimport { useActions } from \"../../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../../hooks/useTypedSelector\";\r\nimport CropperComponent from \"../../../containers/CropperComponent/CropperComponent\";\r\nimport {  useRef } from \"react\";\r\nimport CropperMultiple from \"../../../containers/CropperMultiple/CropperMultiple\";\r\nimport { Toast } from \"primereact/toast\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AddNewsActions } from '../AddNews/types';\r\nimport { EditNewsActions } from '../EditNews/types';\r\n\r\ninterface FormProps {\r\n  initVal: IEditorValues;\r\n  addUpdateHandler: (\r\n    data: IEditorValues\r\n  ) => (\r\n    dispatch: React.Dispatch<AddNewsActions | EditNewsActions>\r\n  ) => Promise<void>;\r\n  buttonText: string;\r\n  header: string;\r\n  toaastDetail: string;\r\n}\r\n\r\nconst FormNews = (props: FormProps) => {\r\n  const navigate = useNavigate();\r\n  const { uploadImages } = useActions();\r\n  const { images } = useTypedSelector((store) => store.news);\r\n  const toast = useRef<Toast>(null);\r\n  const { loading } = useTypedSelector((store) => store.news);\r\n  const cyr = new (CyrillicToTranslit as any)();\r\n  const { initVal, addUpdateHandler, buttonText, header, toaastDetail } = props;\r\n  const initialValues = initVal\r\n\r\n  const uploadImng = async (image: string) => {\r\n    try {\r\n      await uploadImages(image);\r\n      if (toast.current !== null) {\r\n        toast.current.show({\r\n          severity: \"info\",\r\n          summary: \"Виконано\",\r\n          detail: \"Фото додано\",\r\n          life: 3000,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (toast.current !== null) {\r\n        toast.current.show({\r\n          severity: \"error\",\r\n          summary: \"Виконано\",\r\n          detail: \"Щось пішло не так\",\r\n          life: 3000,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const onHandleSubmit = async (values: IEditorValues) => {\r\n    try {\r\n      await addUpdateHandler(values);\r\n      if (toast.current !== null) {\r\n        toast.current.show({\r\n          severity: \"info\",\r\n          summary: \"Виконано\",\r\n          detail: toaastDetail,\r\n          life: 3000,\r\n        });\r\n      }\r\n      navigate(\"/adminPanel/newsList\");\r\n    } catch (error) {\r\n      if (toast.current !== null) {\r\n        toast.current.show({\r\n          severity: \"error\",\r\n          summary: \"Виконано\",\r\n          detail: \"Щось пішло не так\",\r\n          life: 3000,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: initialValues,\r\n    validationSchema: EditorSchema,\r\n    onSubmit: onHandleSubmit,\r\n    enableReinitialize: true\r\n  });\r\n\r\n  const {\r\n    errors,\r\n    touched,\r\n    handleChange,\r\n    handleSubmit,\r\n    setFieldValue,\r\n    values,\r\n  } = formik;\r\n\r\n  return (\r\n    <>\r\n      <Toast ref={toast} />\r\n      <Card style={{ padding: \"1rem\" }}>\r\n        <h1 className=\"text-center\">{header}</h1>\r\n        <FormikProvider value={formik}>\r\n          <Form onSubmit={handleSubmit}>\r\n            <div className=\"row\">\r\n              <div className=\"col-3\">\r\n                <InputGroup\r\n                  field=\"name\"\r\n                  label=\"Заголовок\"\r\n                  error={errors.name}\r\n                  onChange={handleChange}\r\n                  onBlur={() =>\r\n                    setFieldValue(\"slug\", cyr.transform(values.name, \"-\"))\r\n                  }\r\n                  touched={touched.name}\r\n                  value={values.name}\r\n                />\r\n\r\n                <label htmlFor=\"image\">Фото новини</label>\r\n                <div className=\"form-control mb-1\">\r\n                  <CropperComponent\r\n                    field=\"image\"\r\n                    onChange={setFieldValue}\r\n                    error={errors.image}\r\n                    touched={touched.image}\r\n                    value={values.image}\r\n                  />\r\n                </div>\r\n                <label htmlFor=\"isShow\">Відображення новини</label>\r\n\r\n                <div className=\"m-2\">\r\n                  <InputSwitch\r\n                    checked={values.isShow}\r\n                    onChange={(e) => setFieldValue(\"isShow\", e.value)}\r\n                  />\r\n                </div>\r\n\r\n                <InputGroup\r\n                  field=\"slug\"\r\n                  label=\"Slug\"\r\n                  error={errors.slug}\r\n                  onChange={handleChange}\r\n                  onBlur={() =>\r\n                    setFieldValue(\"slug\", cyr.transform(values.slug, \"-\"))\r\n                  }\r\n                  touched={touched.slug}\r\n                  value={values.slug}\r\n                />\r\n                <Callendar\r\n                  field=\"dateTimePublish\"\r\n                  label=\"Дата публікації\"\r\n                  error={errors.dateTimePublish}\r\n                  touched={touched.dateTimePublish}\r\n                  value={values.dateTimePublish}\r\n                  onChange={(data: Date) => {\r\n                    setFieldValue(\r\n                      \"dateTimePublish\",\r\n                      data.toLocaleDateString(\"uk-UA\")\r\n                    );\r\n                    console.log(values.dateTimePublish);\r\n                    \r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"col-9\">\r\n                <EditorTiny\r\n                  value={values.text}\r\n                  field=\"text\"\r\n                  label=\"Текст новини\"\r\n                  error={errors.text}\r\n                  touched={touched.text}\r\n                  onEditorChange={(a: string) => {\r\n                    setFieldValue(\"text\", a);\r\n                  }}\r\n                />\r\n                <div className=\"row\">\r\n                  <div className=\"col-3\">\r\n                    <label htmlFor=\"addImage\" className=\" p-2\">\r\n                      Загрузити картинки\r\n                    </label>\r\n                    <CropperMultiple\r\n                      onChange={() => {}}\r\n                      field=\"addImage\"\r\n                      uploadImageHandler={uploadImng}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-9\">\r\n                    <label htmlFor=\"addImage\" className=\" p-2\">\r\n                      Адреси картинок\r\n                    </label>\r\n                    <p className=\"form-control h-100\">\r\n                      {images.map((el: PhotoObj, i: number) => (\r\n                        <p key={i}>{el.name}</p>\r\n                      ))}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"d-flex\">\r\n              <Button type=\"submit\" label={buttonText} icon=\"pi pi-plus\" />\r\n            </div>\r\n          </Form>\r\n        </FormikProvider>\r\n        {loading && <EclipseWidget />}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormNews;\r\n","import { useActions } from \"../../../../hooks/useActions\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport FormNews from '../NewsForm';\r\n\r\nconst AddNews = () => {\r\n  const { addNews } = useActions();\r\n\r\n  const initValues = {\r\n  name: \"\",\r\n  text: \"\",\r\n  image: \"\",\r\n  slug: \"\",\r\n  isShow: false,\r\n  dateTimePublish: \"\"\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Добавити новини</title>\r\n      </Helmet>\r\n      <FormNews\r\n        initVal={initValues}\r\n        addUpdateHandler={addNews}\r\n        buttonText=\"Додати\"\r\n        header=\"Додати новину\"\r\n        toaastDetail=\"Новину додано\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddNews;\r\n"],"sourceRoot":""}