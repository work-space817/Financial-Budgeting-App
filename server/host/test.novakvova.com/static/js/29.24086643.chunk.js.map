{"version":3,"sources":["components/auth/Login/validation.ts","components/auth/Login/index.tsx"],"names":["LoginSchema","Yup","email","required","password","min","matches","invalid","LoginPage","useState","loading","setLoading","LoginUser","useActions","navigator","useNavigate","onHandleSubmit","values","setFieldError","serverErrors","console","log","undefined","length","responseGoogle","response","useEffect","gapi","load","client","init","clientId","scope","formik","useFormik","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleSubmit","Helmet","className","value","role","name","InputGroup","field","label","type","error","onChange","to","disabled","onSuccess","onFailure","cookiePolicy"],"mappings":"iLAEaA,EAAcC,IAAW,CACpCC,MAAOD,MACJC,MAAM,2IACNC,SAAS,6EAEXC,SAAUH,MACNE,SAAS,oFACTE,IAAI,EAAG,qMACPC,QAAQ,cAAe,yMAC1BC,QAASN,Q,kECqIEO,UAnIa,WAE1B,IACA,EAA8BC,oBAAkB,GAAM,mBAA/CC,EAAO,KAAEC,EAAU,KAElBC,EAAcC,cAAdD,UACFE,EAAYC,cAEZC,EAAc,iDAAG,WACrBC,EAAe,GAAD,uFAIK,OAHjBC,EAAa,EAAbA,cAAa,SAGbP,GAAW,GAAM,SACXC,EAAUK,GAAQ,KAAD,kBACjBH,EAAU,KAAK,KAAD,EACpBH,GAAW,GAAO,kDAElBA,GAAW,GACLQ,EAAY,KACVf,EAAsBe,EAAtBf,SAAUG,EAAYY,EAAZZ,QAClBa,QAAQC,IAAI,YAAajB,GACzBgB,QAAQC,IAAI,UAAWd,QAENe,IAAblB,GACFc,EAAc,WAAYd,EAAS,IAErCgB,QAAQC,IAAId,EAAQgB,aAEJD,IAAZf,GACFW,EAAc,UAAWX,EAAQ,IAClC,0DAEJ,gBAzBmB,wCA2BdiB,EAAc,iDAAG,WAAOC,GAAc,2EAC1CL,QAAQC,IAAI,aAAcI,GAM1B,2CACD,gBARmB,sCAYpBC,qBAAU,WASRC,IAAKC,KAAK,gBAPV,WAEID,IAAKE,OAAOC,KAAK,CACfC,SAAU,2EACVC,MAAO,IAEb,GAGF,GAAG,IAEL,IAAMC,EAASC,YAAU,CACvBC,cA3D8B,CAAEjC,MAAO,GAAIE,SAAU,GAAIG,QAAQ,IA4DjE6B,iBAAkBpC,EAClBqC,SAAUrB,IAEJsB,EAAgDL,EAAhDK,OAAQC,EAAwCN,EAAxCM,QAASC,EAA+BP,EAA/BO,aAAcC,EAAiBR,EAAjBQ,aAErC,OACE,qCACE,cAACC,EAAA,EAAM,UACL,+DAEF,sBAAKC,UAAU,MAAK,UAClB,qBAAKA,UAAU,UACf,sBAAKA,UAAU,QAAO,UACpB,oBAAIA,UAAU,mBAAkB,sCAChC,cAAC,IAAc,CAACC,MAAOX,EAAO,SAC5B,eAAC,IAAI,CAACI,SAAUI,EAAa,eACPnB,IAAnBgB,EAAO/B,SACN,qBAAKoC,UAAU,iCAAiCE,KAAK,QAAO,SAC1D,cAAC,IAAY,CAACC,KAAK,cAIvB,cAACC,EAAA,EAAU,CACTC,MAAM,QACNC,MAAM,QACNC,KAAK,OACLC,MAAOb,EAAOpC,MACdqC,QAASA,EAAQrC,MACjBkD,SAAUZ,IAGZ,cAACO,EAAA,EAAU,CACTE,MAAM,uCACND,MAAM,WACNE,KAAK,WACLC,MAAOb,EAAOlC,SACdmC,QAASA,EAAQnC,SACjBgD,SAAUZ,IAEZ,sBAAKG,UAAU,iCAAgC,UAC7C,cAAC,IAAI,CAACU,GAAG,mBAAkB,kFAC3B,cAAC,IAAI,CAACA,GAAG,YAAW,2GAGtB,qBAAKV,UAAU,cAAa,SAC1B,wBACEO,KAAK,SACLP,UAAU,yBACVW,SAAU5C,EAAQ,gDAQ5B,qBAAKiC,UAAU,aAEjB,qBAAKA,UAAU,MAAK,SACpB,cAAC,IAAW,CACVZ,SAAS,2EACTwB,UAAW/B,EACLgC,UAhFU,SAACL,GACrB/B,QAAQC,IAAI8B,EACd,EA+EMM,aAAc,qBAAqB,6BAEpC/C,GAAW,cAAC,IAAa,MAGhC,C","file":"static/js/29.24086643.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\n\r\nexport const LoginSchema = Yup.object({\r\n  email: Yup.string()\r\n    .email(\"Не коректно вказана пошта\")\r\n    .required(\"Вкажіть пошту\"),\r\n\r\n   password: Yup.string()\r\n      .required('Вкажіть пароль.')\r\n      .min(5, 'Пароль має містить мінімум 5 символів.')\r\n      .matches(/[a-zA-Z0-9]/, 'Пароль має містить латинські символи.'),\r\n    invalid: Yup.string()\r\n});\r\n","import { useState, useEffect } from \"react\";\r\nimport InputGroup from \"../../common/InputGroup\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { LoginSchema } from \"./validation\";\r\nimport { ILogin, ILoginError } from \"./types\";\r\nimport EclipseWidget from \"../../common/eclipse\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport { useFormik, Form, FormikProvider, FormikHelpers, ErrorMessage } from \"formik\";\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\nimport { gapi } from \"gapi-script\";\r\n\r\nconst LoginPage: React.FC = () => {\r\n\r\n  const initialValues: ILogin = { email: \"\", password: \"\", invalid:\"\" };\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  \r\n  const { LoginUser } = useActions();\r\n  const navigator = useNavigate();\r\n\r\n  const onHandleSubmit = async (\r\n    values: ILogin,\r\n    { setFieldError }: FormikHelpers<ILogin>\r\n  ) => {\r\n    try {\r\n      setLoading(true);\r\n      await LoginUser(values);\r\n      await navigator(\"/\");\r\n      setLoading(false);\r\n    } catch (errors) {\r\n      setLoading(false);\r\n      const serverErrors = errors as ILoginError;\r\n      const { password, invalid } = serverErrors;\r\n      console.log(\"passwword\", password);\r\n      console.log(\"invalid\", invalid);\r\n\r\n      if (password !== undefined) {\r\n        setFieldError(\"password\", password[0]);\r\n      }\r\n      console.log(invalid.length);\r\n      \r\n      if (invalid !== undefined){\r\n        setFieldError(\"invalid\", invalid[0]);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const responseGoogle = async (response : any) => {\r\n    console.log(\"response: \", response);\r\n    // var request : IExternalRequest = {\r\n    //   tokenId: response.tokenId,\r\n    //   accessToken: response.accessToken,\r\n    // }\r\n    // await externalLoginlUser(request);\r\n    // nav(\"/profile\");\r\n  }\r\n  const responseError = (error : any) => {\r\n    console.log(error);\r\n  }\r\n  useEffect(() => {\r\n\r\n    function start()\r\n    {\r\n        gapi.client.init({\r\n          clientId: \"796507215676-0vbbdt783daqei6gmmb665337eiqq6v6.apps.googleusercontent.com\",\r\n          scope: \"\",\r\n        })\r\n    }\r\n    gapi.load('client:auth2', start);\r\n\r\n  }, []);\r\n\r\nconst formik = useFormik({\r\n  initialValues: initialValues,\r\n  validationSchema: LoginSchema,\r\n  onSubmit: onHandleSubmit,\r\n});\r\nconst { errors, touched, handleChange, handleSubmit } = formik;\r\n  \r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Вхід</title>\r\n      </Helmet>\r\n      <div className=\"row\">\r\n        <div className=\"col-3\"></div>\r\n        <div className=\"col-6\">\r\n          <h1 className=\"text-center mt-4\">Вхід</h1>\r\n          <FormikProvider value={formik}>\r\n            <Form onSubmit={handleSubmit}>\r\n              {errors.invalid !== undefined && (\r\n                <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n                  <ErrorMessage name=\"invalid\" />\r\n                </div>\r\n              )}\r\n\r\n              <InputGroup\r\n                field=\"email\"\r\n                label=\"Email\"\r\n                type=\"text\"\r\n                error={errors.email}\r\n                touched={touched.email}\r\n                onChange={handleChange}\r\n              />\r\n\r\n              <InputGroup\r\n                label=\"Пароль\"\r\n                field=\"password\"\r\n                type=\"password\"\r\n                error={errors.password}\r\n                touched={touched.password}\r\n                onChange={handleChange}\r\n              />\r\n              <div className=\"d-flex justify-content-between\">\r\n                <Link to=\"/recoverPassword\">Забув пароль?</Link>\r\n                <Link to=\"/register\">Зареєструватися</Link>\r\n              </div>\r\n\r\n              <div className=\"text-center\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"btn btn-secondary px-5\"\r\n                  disabled={loading}\r\n                >\r\n                  Вхід\r\n                </button>\r\n              </div>\r\n            </Form>\r\n          </FormikProvider>\r\n        </div>\r\n        <div className=\"col-3\"></div>\r\n      </div>\r\n      <div className=\"row\">\r\n      <GoogleLogin\r\n        clientId=\"796507215676-0vbbdt783daqei6gmmb665337eiqq6v6.apps.googleusercontent.com\"\r\n        onSuccess={responseGoogle}\r\n              onFailure={responseError}\r\n        cookiePolicy={'single_host_origin'}>Gooogle login</GoogleLogin>\r\n      </div>\r\n      {loading && <EclipseWidget />}\r\n    </>\r\n  );\r\n};\r\nexport default LoginPage;\r\n"],"sourceRoot":""}